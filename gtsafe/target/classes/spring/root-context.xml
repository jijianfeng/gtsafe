<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 注入获取上下文工具类的applicationContext属性 -->
	<bean class="com.zlzkj.core.utils.SpringContextUtil"></bean>
	<!-- 通用异常类 -->
	<bean id="exceptionResolver" class="com.zlzkj.core.utils.ExceptionHandler"/>  
    
	<!-- <import resource="shiro-context.xml"/> -->
	
	
	<!-- 注解支持 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.zlzkj.**">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 引入配置文件 
	<context:property-placeholder location="classpath:jdbc.properties" />-->
	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:jdbc.properties</value>  
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
              <value>classpath:quartz.properties</value>  
            </list>  
        </property>  
    </bean>  
	
	<!-- 淘宝开源连接池 -->
	<bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <!-- <property name="filters" value="stat" />  -->
      <property name="filters" value="stat,config" />
      <property name="connectionProperties" value="config.decrypt=true" />
  </bean>

	<!-- Hibernate Session Factory -->
	<bean class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" id="mySessionFactory">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan">
			<array>
				<!-- 扫描模型 -->
				<value>com.zlzkj.app.model</value>
			</array>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			</props>
		</property>
	</bean>

	<!-- 事务管理配置 -->
	<bean class="org.springframework.orm.hibernate4.HibernateTransactionManager" id="transactionManager">
		<property name="sessionFactory" ref="mySessionFactory" />
	</bean>

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- REQUIRED表示如有事务则沿用，没有则新建 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<!-- 只读事务会针对查询做优化 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	
</beans>
